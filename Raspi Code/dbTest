from typing import SupportsRound
import spidev
import os
import time
import Adafruit_DHT
import pymongo
from pymongo import MongoClient

DHT_SENSOR = Adafruit_DHT.DHT22 # sensor type for temperature and humidity
DHT_PIN = 4 # Connection pin for the sensor
READ_ERROR_VALUE = -999 # the value that will be given to a measurement if it fails
delay = 60  # Delay between measurements

spi = spidev.SpiDev()
spi.open(0,0)
spi.max_speed_hz=1000000

cluster = MongoClient("mongodb+srv://Vadix3:Vx121212@cluster0.mcatx.mongodb.net/testdb?retryWrites=true&w=majority") # Mongo client 
db = cluster["testdb"] # Selected mongo cluster
collection = db["data"] # Selected collection
 
# A method that will receive a channel to read from and will return the read value from the sensor in that channel
def readChannel(channel): 
  val = spi.xfer2([1,(8+channel)<<4,0])
  data = ((val[1]&3) << 8) + val[2]
  return data
 
if __name__ == "__main__":
  try:
    while True:
 
      humidity, temperature = Adafruit_DHT.read_retry(DHT_SENSOR, DHT_PIN) # Read humidity and temperature from DHT22

      if humidity is not None and temperature is not None:
        print("Temp={0:0.1f}*C  Humidity={1:0.1f}%".format(temperature, humidity))
      else:
        print("Failed to retrieve data from humidity sensor")
        humidity = READ_ERROR_VALUE
        temperature = READ_ERROR_VALUE

      # soil moisture  
      soil = readChannel(0)
      if (soil != 0):
        print("Soil: "+str(soil))
      else:
          soil = READ_ERROR_VALUE
      
      # ambient light
      light = readChannel(1)
      if (light != 0):
        print("Light: "+str(light))
      else:
          light = READ_ERROR_VALUE

      # uv light
      uv = readChannel(2)
      if (uv!= 0):
        print("UV: "+str(uv))
      else:
          uv = READ_ERROR_VALUE

      # insert
      data = {
        "date": time.strftime('%d/%m/%y'),
        "time": time.strftime('%H:%M:%S'),
        "humidity":humidity,
        "temperature":temperature,
        "soil":soil,
        "light":light,
        "uv":uv
        }

      print("Data to write: ", data)
      result = collection.insert_one(data)
      print("Data inserted with record id:",result)
  
      # Printing the data inserted
      cursor = collection.find()
      for record in cursor:
        print(record)

      time.sleep(delay)
      
  except KeyboardInterrupt:
    print("Cancel.")
